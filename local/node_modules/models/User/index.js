"use strict";

const bcrypt = require('bcryptjs');

const { _create }             = require('unityMongo/create');
const { _delete }             = require('unityMongo/delete');
const { _count, _find, _all } = require('unityMongo/read');
const { newErr, customErr }   = require('lib/error');
const { 
  safeEmail,
  safeNum,
  safeBool,
  safePass,
  safeStr,
  } = require('lib/safe');

const User = function() {
  this.email = {
    value   : '',
    required: true,
    safe    : function(email) {
      return safeEmail(email);
    }
  }
  this.password = {
    value   : '',
    required: false
  }
  this.type = {
    value   : '',
    required: true,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.timestamp = {
    value   : '',
    required: true,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.firstLogin = {
    value   : '',
    required: false // TODO Change to false after login
  }
  this.authenticate = async function(email, password, callback) {
    let thisEmail    = safeEmail(email);
    let thisPassword = safePass(password);

    if (!thisEmail.safe)
      return callback(customErr('Invalid Email'));

    if (!thisPassword.safe)
      return callback(customErr('Invalid Password'));

      try{
        let user = await _find('user', {'email': thisEmail.val});

        if (!user)
          return callback(customErr('Invalid Email'));

        let validPW = await bcrypt.compare(thisPassword.val, user.password);

        if (!validPW)
          return callback(customErr('Invalid Email'));

        return callback(null, user);
      } catch(err) {
        // TODO: Handle error
        console.log(err);
      }
  }
  this.setVal = function(key, val) {
    let safeValue;

    if (typeof key !== 'string')
      return false;

    if (typeof val !== 'string')
      return false;

    safeValue = this[key].safe(val);

    if (safeValue.safe) {
      this[key].value = safeValue.val;

      return true;
    }

    return false;
  }
  this.hash = async function(password) {
      let safePassword = safePass(password);

      if (safePassword.safe) {
        try{
           let salt = await bcrypt.genSalt(13);

           let hash = await bcrypt.hash(safePassword.val, salt);

           this.password.value = hash;
        } catch(err) {
          // TODO: Handle error
          console.log(err);
        }

        return true;
      }
      
      return false;
  }
  // An object to be inserted into NoSQL DB
  this.getObject = function() {
    let object = {};
    let keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length; i++) {
      object[keys[i]] = this[keys[i]].value;
    }

    return object;
  }
  // An object with required props
  this.getFullObject = function() {
    let object = {};
    let keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length; i++) {
      object[keys[i]] = {
        value:    this[keys[i]].value,
        required: this[keys[i]].required
      };
    }

    return object;
  }
  this.reset = function() {
    let keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length - 1; i++) {
      this[keys[i]].value = '';
    }

    return;
  }
  this.create = function(callback) {
    const fullObj = this.getFullObject();
    const dataObj = this.getObject();

    const keys = Object.keys(fullObj);

    for(let x = 0; x < keys.length; x++) {
      if (fullObj[keys[x]].required === true){
        if (fullObj[keys[x]].value === '') {
          this.reset();
          return callback(customErr('Missing Required Value'))
        }
      }
    }

    _count('user', {
      'email': this.email.value
    }, function(error, count) {
      if (error !== null)
        return callback(newErr(error));

      if (!count) {
        _create('user', dataObj, function(error, user) {
          if (error !== null)
            return callback(newErr(error));

          return callback(null, user)
        });
      }else{
        return callback(customErr('Duplicate Email'));
      }
    });
  }
  this.delete = function(filter, callback) {
    _delete('user', filter, function(error, numOfDeletes) {
      if (error !== null)
        return callback(newErr(error));

      return callback(null, numOfDeletes)
    });
  }
  this.all = async function() {
    try {
      const users = await _all('user');

      return users;

    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }      
  }
  this.find = async function(filter) {
    if (filter === undefined)
      filter = this.getObject();

    try {
      const user = await _find('user', filter);

      return user;
    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }
  }
}

module.exports = User;
