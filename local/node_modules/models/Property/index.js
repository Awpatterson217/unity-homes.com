"use strict";

const { _create }             = require('unityMongo/create');
const { _delete }             = require('unityMongo/delete');
const { _count, _find, _all } = require('unityMongo/read');
const { newErr, customErr }   = require('lib/error');
const { 
  safeNum,
  safeBool,
  safeStr,
  safeYear
  } = require('lib/safe');

const Property = function() {
  this.id = {
    value   : '',
    required: false
  }
  this.mainImage = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.type = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.street = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }        
  }
  this.city = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.state = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.zip = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.stories = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.rent = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.occupied = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.occupants = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.sqft = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.year = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeYear(num);
    }
  }
  this.washer = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.dryer = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.garage = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.basement = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.fence = {
    value   : '',
    required: false,
    safe    : function(bool) {
      return safeBool(bool);
    }        
  }
  this.timestamp = {
    value   : '',
    required: false,
  }
  this.setVal = function(key, val) {
    let safeValue;

    if (typeof key !== 'string') {
      return false;
    }

    if (typeof val !== 'string') {
      return false;
    }

    safeValue = this[key].safe(val);

    if (safeValue.safe) {
      this[key].value = safeValue.val;
      
      return true;
    }

    return false;
  }
  // An object to be inserted into NoSQL DB
  this.getObject = function() {
    const object = {}
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function') {
        keys.push(val);
      }
    }.bind(this));

    for (let i = 0; i < keys.length - 1; i++) {
      object[keys[i]] = this[keys[i]].value;
    }

    return object;
  }
  // An object with required props
  this.getFullObject = function() {
    const object = {};
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function') {
        keys.push(val);
      }
    }.bind(this));

    for (let i = 0; i < keys.length; i++) {
      object[keys[i]] = {
        value:    this[keys[i]].value,
        required: this[keys[i]].required
      };
    }

    return object;
  }
  this.reset = function() {
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function') {
        keys.push(val);
      }
    }.bind(this));

    for (let i = 0; i < keys.length - 1; i++) {
      this[keys[i]].value = '';
    }

    return;
  }
  this.create = function(callback) {
    this.timestamp.value = Math.round((new Date()).getTime() / 1000);

    const fullObj = this.getFullObject();
    const dataObj = this.getObject();

    const keys = Object.keys(fullObj);

    for(let x = 0; x < keys.length; x++) {
      if (fullObj[keys[x]].required === true){
        if (fullObj[keys[x]].value === '') {
          this.reset();
          return callback(customErr('Missing Required Value'))
        }
      }
    }

    _count('property', {
      'street': this.street.value
    }, function(error, count) {

      if (error) {
        return callback(newErr(error));
      }

      if (!count) {
        let newStreet = ''
        let copiedStreet = this.street.value;
        for (let i = 0; i < copiedStreet.length; i++) {
          if (copiedStreet[i] === ' ')
            continue;
          newStreet += copiedStreet[i];
        }
        this.id.value = newStreet.toLowerCase();
        _create('property', dataObj, function(error, prop) {
          if (error) {
            return callback(newErr(error));
          }

          return callback(null, prop)
        });
      }else{
        return callback(customErr('Duplicate Property'));
      }
    }.bind(this));
  }
  this.delete = function(filter, callback) {
    _delete('property', filter, function(error, numOfDeletes) {
      if (error) {
        return callback(newErr(error));
      }

      return callback(null, numOfDeletes)
    });
  }
  this.all = async function() {
    try {
      const properties = await _all('property');

      return properties;

    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }      
  }
  this.find = async function(filter) {
    const thisFilter = filter
      ? filter
      : this.getObject();

    try {
      const property = await _find('property', thisFilter);

      return property;
    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }
  }
  this.fill = function(request, callback) {
    const dataObj = this.getObject();

    Object.keys(request.body).forEach(function(key) {
      if (dataObj.hasOwnProperty(key)) {
        this.setVal(key, request.body[key]);
      }
    }.bind(this));

    const filledObj = this.getObject();

    const fullObj = this.getFullObject();

    const keys = Object.keys(fullObj);

    for(let x = 0; x < keys.length; x++) {
      if (fullObj[keys[x]].required === true){
        if (fullObj[keys[x]].value === '') {
          this.reset();
          return callback(customErr('Missing Required Value'))
        }
      }
    }

    return callback(null, filledObj);
  }
}

module.exports = Property;
