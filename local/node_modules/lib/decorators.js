"use strict";

const { customErr } = require('lib/error');
const { _create }   = require('crud');
const { _delete }   = require('crud');
const {
  _count,
  _find,
  _all,
} = require('crud');
const { 
  safeEmail,
  safeNum,
  safeStr,
} = require('lib/safe');

// TODO:
// replace typeof checks with fn
// lambdas

function Basic() {
  this.email = {
    value   : '',
    required: true,
    safe    : function(email) {
      return safeEmail(email);
    }
  }
  this.phone = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
  this.firstName = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.middleName = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.lastName = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
}

function Address() {
  this.street = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }        
  }
  this.city = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.state = {
    value   : '',
    required: false,
    safe    : function(str) {
      return safeStr(str);
    }
  }
  this.zip = {
    value   : '',
    required: false,
    safe    : function(num) {
      return safeNum(num);
    }
  }
}

function DataModel() {
  this.timestamp = {
    value   : '',
    required: false,
  }
  this.setVal = function(key, val) {
    let safeValue;

    if (typeof key !== 'string') {
      return false;
    }

    if (typeof val !== 'string') {
      return false;
    }

    safeValue = this[key].safe(val);

    if (safeValue.safe) {
      this[key].value = safeValue.val;
      
      return true;
    }

    return false;
  }
  this.reset = function() {
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length - 1; i++) {
      this[keys[i]].value = '';
    }

    return;
  }
  // An object to be inserted into NoSQL DB
  this.getObject = function() {
    const object = {};
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length; i++) {
      object[keys[i]] = this[keys[i]].value;
    }

    return object;
  }
  // An object like { value, required }
  this.getFullObject = function() {
    const object = {};
    const keys   = [];

    Object.keys(this).forEach(function(val, i, arr) {
      if (typeof this[val] !== 'function')
        keys.push(val);
    }.bind(this));

    for (let i = 0; i < keys.length; i++) {
      object[keys[i]] = {
        value:    this[keys[i]].value,
        required: this[keys[i]].required
      };
    }

    return object;
  }
  this.fill = function(request, callback) {
    const dataObj = this.getObject();

    Object.keys(request.body).forEach(function(key) {
      if (dataObj.hasOwnProperty(key))
        this.setVal(key, request.body[key]);
    }.bind(this));

    const filledObj = this.getObject();

    const fullObj = this.getFullObject();

    const keys = Object.keys(fullObj);

    for(let x = 0; x < keys.length; x++) {
      if (fullObj[keys[x]].required === true){
        if (fullObj[keys[x]].value === '') {
          this.reset();
          return callback(customErr('Missing Required Value'))
        }
      }
    }

    return callback(null, filledObj);
  }
  this.create = function(callback) {
    this.timestamp.value = Math.round((new Date()).getTime() / 1000);

    const fullObj = this.getFullObject();
    const dataObj = this.getObject();

    const keys = Object.keys(fullObj);

    for(let x = 0; x < keys.length; x++) {
      if (fullObj[keys[x]].required === true){
        if (fullObj[keys[x]].value === '') {
          this.reset();
          return callback(customErr('Missing Required Value'))
        }
      }
    }

    const filter = {};
    // TODO: better solution than uniqueVal
    filter[this.uniqueVal] = this[this.uniqueVal].value;

    _count(this.collection, filter, (error, count) => {
      if (error) {
        return callback(newErr(error));
      }

      if (count) {
        return callback(customErr('Duplicate'));
      }

      _create(this.collection, dataObj, (error, admin) => {
        if (error) {
          return callback(newErr(error));
        }

        return callback(null, admin)
      });
    });
  }
  this.delete = function(filter, callback) {
    _delete(this.collection, filter, function(error, numOfDeletes) {
      if (error)
        return callback(newErr(error));

      return callback(null, numOfDeletes)
    });
  }
  this.all = async function() {
    try{
      const objects = await _all(this.collection);

      return objects;
    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }    
  }
  this.find = async function(filter) {
    const thisFilter = filter
      ? filter
      : this.getObject();

    try{
      const obj = await _find(this.collection, thisFilter);

      return obj;
    } catch(err) {
      // TODO: Handle error
      console.log(err);
      return err;
    }
  }
}

module.exports = {
  DataModel,
  Basic,
  Address,
}
