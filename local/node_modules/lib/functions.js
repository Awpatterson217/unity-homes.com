"use strict";

const path = require('path');
const fs   = require('fs');

const Tenan     = require('models/Tenant');
const Property  = require('models/Property');
const Applicant = require('models/Applicant');

const isEmpty = function(...str) {
  let params = [...str];
  let empty  = false;

  params.forEach(function(val, index, array) {
    if (val === '')
      empty = true;
  });
  if (empty)
    return true;
  return false;  
}

const propdata = async function() {
  const property = new Property();

  let data = {};
  try{
    let properties = await property.all();

    for (let i = 0; i < properties.length; i++) {
      properties[i].images = [];
      let theseImages = await getImages(properties[i].id);
      properties[i].images.concat(theseImages);
    }

    data.properties = properties;

    return callback(null, data);
  }catch(error) {
    return callback(error);
  }
}

const adminData = async function(fullName, callback) {
  const tenant    = new Tenant();
  const applicant = new Applicant();
  const property  = new Property();

  try{
    const applicants = await applicant.all();
    const tenants    = await tenant.all();
    const properties = await property.all();

    for (let i = 0; i < properties.length; i++) {
      const theseImages = await getImages(properties[i].id);
      properties[i].images = theseImages;
    }

    const data = {
      applicants,
      tenants,
      properties
    };

    return callback(null, data);
    console.log(data);
  }catch(error) {
    console.log(error);
    return callback(error);
  }
}

const imageMatcher = function(item, id) {
  let parsedItem;
  parsedItem = path.parse(item);
  parsedItem = parsedItem.name;
  parsedItem = parsedItem.split('-', 1);
  return (parsedItem[0] === id);
}

const getImages = function(id) {
  let pathToImages;
  pathToImages = path.join('public', 'resources', 'images', 'properties');
  pathToImages = path.join(process.cwd(), pathToImages);

  return new Promise((resolve, reject) => {
    let allImages;
    fs.readdir(pathToImages, (err, items) => {
      if (err !== null)
        reject(err);
      allImages = items.filter(item => imageMatcher(item, id));
      resolve(allImages);
    });
  });
}

module.exports = {
  isEmpty,
  getImages,
  adminData,
  propdata,
};
